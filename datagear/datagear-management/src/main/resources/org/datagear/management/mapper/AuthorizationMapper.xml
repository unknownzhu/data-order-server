<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.datagear.management.domain.Authorization">

	<insert id="insert">
		INSERT INTO DATAGEAR_AUTHORIZATION
			(
			AUTH_ID, AUTH_RESOURCE, AUTH_RESOURCE_TYPE, AUTH_PRINCIPAL, AUTH_PRINCIPAL_TYPE,
			AUTH_PERMISSION, AUTH_ENABLED, AUTH_CREATE_USER_ID
			)
		VALUES
			(
			#{entity.id}, #{entity.resource}, #{entity.resourceType}, #{entity.principal}, #{entity.principalType},
			#{entity.permission}, #{entity.enabled, jdbcType=VARCHAR},#{entity.createUser.id}
			)
	</insert>
	
	<update id="update">
		UPDATE DATAGEAR_AUTHORIZATION SET
			AUTH_RESOURCE = #{entity.resource},
			AUTH_RESOURCE_TYPE = #{entity.resourceType},
			AUTH_PRINCIPAL = #{entity.principal},
			AUTH_PRINCIPAL_TYPE = #{entity.principalType},
			AUTH_PERMISSION = #{entity.permission},
			AUTH_ENABLED = #{entity.enabled, jdbcType=VARCHAR}
		WHERE
			AUTH_ID = #{entity.id}
	</update>
	
	<delete id="deleteById">
		DELETE FROM DATAGEAR_AUTHORIZATION
		WHERE
			AUTH_ID = #{id}
	</delete>
	
	<delete id="deleteByResource">
		DELETE FROM DATAGEAR_AUTHORIZATION
		WHERE
			AUTH_RESOURCE_TYPE = #{resourceType}
			AND
			(
				<foreach item="item" collection="resources" separator=" OR ">AUTH_RESOURCE = #{item}</foreach>
			)
	</delete>
	
	<select id="getById" resultType="org.datagear.management.domain.Authorization">
		select a.*,b.SCHEMA_TITLE as schemaTitle from  (
		SELECT
			T.*
		FROM
			(<include refid="queryView" />) T
		WHERE
			T.${_iq_}id${_iq_} = #{id}
		)  a      left join   DATAGEAR_SCHEMA b on a.tmpResource = b.SCHEMA_ID
	</select>
	
	<select id="getDataIdPermissions" resultType="org.datagear.management.domain.DataIdPermission">
		SELECT
			T.DATA_ID as ${_iq_}dataId${_iq_},
			T.DATA_PERMISSION as ${_iq_}dataPermission${_iq_}
		FROM
			(
				<include refid="commonDataPermission.dataIdPermissionQueryViewHead" />
				<include refid="queryViewDataPermissionId" />
				<include refid="commonDataPermission.dataIdPermissionQueryViewFoot" />
			) T
		WHERE
			<foreach item="item" collection="ids" separator=" OR ">T.DATA_ID = #{item}</foreach>
	</select>
	
	<select id="getDataIdPermissionForPatternSource" resultType="org.datagear.management.domain.DataIdPermission">
		SELECT
			T.DATA_ID as ${_iq_}dataId${_iq_},
			T.DATA_PERMISSION as ${_iq_}dataPermission${_iq_}
		FROM
			(
				<include refid="commonDataPermission.dataIdPermissionQueryViewHead" />
				SELECT
					${placeholderId} AS DP_AUTH_DATA_ID,
					${patternSource} AS DP_AUTH_DATA_PATTERN_SRC,
					PLACEHOLDER_TABLE.PLACEHOLDER_COL
				FROM
					/*Derby没有类似from dual的语法，为了兼容其它数据库，这里采用了此种方法*/
					(SELECT COUNT(*) AS PLACEHOLDER_COL FROM DATAGEAR_VERSION) PLACEHOLDER_TABLE
				<include refid="commonDataPermission.dataIdPermissionQueryViewFoot" />
			) T
	</select>
	
	<select id="query" resultType="org.datagear.management.domain.Authorization">
		select a.*,b.SCHEMA_TITLE as schemaTitle from  (
		SELECT
			T.*
		FROM
			(<include refid="queryViewDataPermission" />) T
		WHERE
			<include refid="queryCondition" />
		<include refid="common.queryOrder" />
		)  a      left join   DATAGEAR_SCHEMA b on a.tmpResource = b.SCHEMA_ID
	</select>
	
	<select id="pagingQueryCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			(<include refid="queryViewDataPermission" />) T
		WHERE
			<include refid="queryCondition" />
	</select>
	
	<select id="pagingQuery" resultType="org.datagear.management.domain.Authorization">
		<include refid="common.pagingQueryHead" />
		select a.*,b.SCHEMA_TITLE as schemaTitle   from  (
			SELECT
				T.*
			FROM
				(<include refid="queryViewDataPermission" />) T
			WHERE
				<include refid="queryCondition" />
			<include refid="common.queryOrder" />
		)  a      left join   DATAGEAR_SCHEMA b on a.tmpResource = b.SCHEMA_ID
		<include refid="common.pagingQueryFoot" />
	</select>
	
	<sql id="queryViewDataPermission">
		<choose><when test="DP_CURRENT_USER == null">
		<include refid="queryView" />
		</when><otherwise>
		SELECT
			T0.*,
			T1.DATA_PERMISSION as ${_iq_}dataPermission${_iq_}
		FROM
			(<include refid="queryView" />) T0
			INNER JOIN
			(
				<include refid="commonDataPermission.dataIdPermissionQueryViewHead" />
				<include refid="queryViewDataPermissionId" />
				<include refid="commonDataPermission.dataIdPermissionQueryViewFoot" />
			) T1
		ON
			T0.${_iq_}id${_iq_} = T1.DATA_ID
		WHERE
			T1.DATA_PERMISSION >= ${DP_MIN_READ_PERMISSION}
		</otherwise></choose>
	</sql>
	
	<sql id="queryViewDataPermissionId">
		SELECT
			A.AUTH_ID AS DP_AUTH_DATA_ID,
			A.AUTH_CREATE_USER_ID AS DP_AUTH_DATA_CREATOR_ID
		FROM
			DATAGEAR_AUTHORIZATION A
	</sql>
	
	<sql id="queryView">
		SELECT
			A.AUTH_ID AS ${_iq_}id${_iq_},
			A.AUTH_RESOURCE AS ${_iq_}resource${_iq_},
			A.AUTH_RESOURCE AS  tmpResource ,
			A.AUTH_RESOURCE_TYPE AS ${_iq_}resourceType${_iq_},
			A.AUTH_PRINCIPAL AS ${_iq_}principal${_iq_},
			A.AUTH_PRINCIPAL_TYPE AS ${_iq_}principalType${_iq_},
			A.AUTH_PERMISSION AS ${_iq_}permission${_iq_},
			A.AUTH_ENABLED AS ${_iq_}enabled${_iq_},
			A.AUTH_CREATE_TIME AS ${_iq_}ceateTime${_iq_},
			A.AUTH_CREATE_USER_ID AS ${_iq_}createUser.id${_iq_},
			A.USER_NAME AS ${_iq_}createUser.name${_iq_},
			A.USER_REAL_NAME AS ${_iq_}createUser.realName${_iq_},
			A.USER_IS_ADMIN AS ${_iq_}createUser.admin${_iq_},
			A.USER_CREATE_TIME AS ${_iq_}createUser.createTime${_iq_},
			<choose><when test="resourceNameQueryView != null">
			(
				CASE A.AUTH_RESOURCE_TYPE
					WHEN '${resourceType}' THEN B.RESOURCE_NAME
					WHEN '${resourceType}_PATTERN' THEN A.AUTH_RESOURCE
					ELSE A.AUTH_RESOURCE
				END
			)
			</when><otherwise>
			A.AUTH_RESOURCE
			</otherwise></choose>
			AS ${_iq_}resourceName${_iq_},
			(
				CASE A.AUTH_PRINCIPAL_TYPE
					WHEN 'ALL' THEN '${queryContext.principalAllLabel}'
					WHEN 'ANONYMOUS' THEN '${queryContext.principalAnonymousLabel}'
					WHEN 'ROLE' THEN C.ROLE_NAME
					WHEN 'USER' THEN
					(
						CASE
							WHEN D.USER_REAL_NAME IS NOT NULL THEN D.USER_REAL_NAME
							ELSE D.USER_NAME
						END
					)
					ELSE A.AUTH_PRINCIPAL
				END
			) AS ${_iq_}principalName${_iq_},
			<choose><when test="queryContext.permissionLabels != null">
			(
				CASE A.AUTH_PERMISSION
					<foreach collection="queryContext.permissionLabels" item="item">
					WHEN ${item.value} THEN '${item.label}'
					</foreach>
					ELSE ''
				END
			)
			</when><otherwise>
			A.AUTH_PERMISSION
			</otherwise></choose>
			 AS ${_iq_}permissionLabel${_iq_}
		FROM
			(<include refid="queryViewWithCreateUser" />) A
		<if test="resourceNameQueryView != null">
		LEFT JOIN
			(${resourceNameQueryView}) B
		ON
			A.AUTH_RESOURCE_TYPE = '${resourceType}' AND A.AUTH_RESOURCE = B.RESOURCE_ID
		</if>
		LEFT JOIN
			DATAGEAR_ROLE C
		ON
			A.AUTH_PRINCIPAL_TYPE = 'ROLE' AND A.AUTH_PRINCIPAL = C.ROLE_ID
		LEFT JOIN
			DATAGEAR_USER D
		ON
			A.AUTH_PRINCIPAL_TYPE = 'USER' AND A.AUTH_PRINCIPAL = D.USER_ID
		<if test="resourceType != null">
		WHERE
			A.AUTH_RESOURCE_TYPE = '${resourceType}' OR AUTH_RESOURCE_TYPE = '${resourceType}_PATTERN'
		</if>
	</sql>
	
	<sql id="queryViewWithCreateUser">
		SELECT
			A.*,
			B.USER_NAME,
			B.USER_REAL_NAME,
			B.USER_IS_ADMIN,
			B.USER_CREATE_TIME
		FROM
			DATAGEAR_AUTHORIZATION A
		INNER JOIN
			DATAGEAR_USER B
		ON
			A.AUTH_CREATE_USER_ID = B.USER_ID
	</sql>
	
	<sql id="queryCondition">
		1 = 1
		<choose><when test="assignedResource != null">
			AND ${_iq_}resource${_iq_} = #{assignedResource} AND ${_iq_}resourceType${_iq_} NOT LIKE '%_PATTERN'
			<if test="queryKeyword != null">
			AND  ${_iq_}principalName${_iq_} LIKE #{queryKeyword}
			</if>
		</when><otherwise>
			<if test="queryKeyword != null">
			AND
			(
				${_iq_}resourceName${_iq_} LIKE #{queryKeyword} OR ${_iq_}principalName${_iq_} LIKE #{queryKeyword}
			)
			</if>
		</otherwise></choose>
		<include refid="common.queryCondition" />
	</sql>
</mapper>